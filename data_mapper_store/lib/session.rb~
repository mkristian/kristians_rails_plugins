class Session

  include DataMapper::Resource

  property :session_id, String, :key => true

  property :serialized_data, Text, :nullable => false, :field => "data", :default => ActiveSupport::Base64.encode64(Marshal.dump({}))

  property :updated_at, DateTime, :nullable => false

  attr_writer :data

  before :save, :marshal_data!

  class << self
    
    def marshal(data)   ActiveSupport::Base64.encode64(Marshal.dump(data)) if data end
    def unmarshal(data) Marshal.load(ActiveSupport::Base64.decode64(data)) if data end

  end

  # Lazy-unmarshal session state.
  def data
    @data ||= self.class.unmarshal(attribute_get(:serialized_data)) || {}
  end     

  private

  def marshal_data!
    return false if @data.nil?
    attribute_set(:serialized_data, self.class.marshal(self.data))
    true
  end
end

